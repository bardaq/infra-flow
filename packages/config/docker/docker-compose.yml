# Load environment variables from .env file
# Place your .env file in packages/config/.env
# Copy from packages/config/env.example and customize
# ALL variables must be defined in .env file - no fallbacks provided

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: infra-flow-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../postgres-init:/docker-entrypoint-initdb.d
    networks:
      - infra-flow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # MinIO File Storage
  minio:
    image: minio/minio:latest
    container_name: infra-flow-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - infra-flow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # API Server
  api:
    build:
      context: ../../../
      dockerfile: packages/config/docker/Dockerfile.api
    container_name: infra-flow-api
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: ${DATABASE_URL}
      PORT: ${PORT}
      HOST: 0.0.0.0
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - infra-flow-network
    volumes:
      - ../logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/trpc/test.version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Next.js Web Application
  web:
    build:
      context: ../../../
      dockerfile: packages/config/docker/Dockerfile.web
      target: runner
      args:
        DATABASE_URL: ${DATABASE_URL}
        MINIO_ENDPOINT: ${MINIO_ENDPOINT}
        MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
        MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_TRPC_URL: ${NEXT_PUBLIC_TRPC_URL}
    container_name: infra-flow-web
    environment:
      NODE_ENV: ${NODE_ENV}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_TRPC_URL: ${NEXT_PUBLIC_TRPC_URL}
      DATABASE_URL: ${DATABASE_URL}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - infra-flow-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  infra-flow-network:
    driver: bridge

