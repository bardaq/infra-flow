# Multi-stage build for Next.js Web App
FROM node:20-alpine AS base
WORKDIR /app

# Install dependencies with dev dependencies for development and building
FROM base AS dev-deps
RUN apk add --no-cache libc6-compat
COPY package.json package-lock.json ./
COPY apps/web/package.json ./apps/web/
COPY apps/api/package.json ./apps/api/
COPY packages/config/package.json ./packages/config/
COPY packages/ui/package.json ./packages/ui/
RUN npm ci

# Copy source code
COPY . .

# Development image - NO standalone build for HMR
FROM dev-deps AS development

# Add build arguments for environment variables needed during build
ARG DATABASE_URL
ARG MINIO_ENDPOINT
ARG MINIO_ACCESS_KEY
ARG MINIO_SECRET_KEY
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_TRPC_URL

# Set environment variables from build arguments
ENV DATABASE_URL=$DATABASE_URL
ENV MINIO_ENDPOINT=$MINIO_ENDPOINT
ENV MINIO_ACCESS_KEY=$MINIO_ACCESS_KEY
ENV MINIO_SECRET_KEY=$MINIO_SECRET_KEY
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV NEXT_PUBLIC_TRPC_URL=$NEXT_PUBLIC_TRPC_URL

ENV NODE_ENV=development
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Set ownership
RUN chown -R nextjs:nodejs .

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Set working directory to apps/web for development
WORKDIR /app/apps/web

# Start the development server with HMR
CMD ["npm", "run", "dev"]

# Production builder - builds standalone
FROM dev-deps AS builder

# Add build arguments for environment variables needed during build
ARG DATABASE_URL
ARG MINIO_ENDPOINT
ARG MINIO_ACCESS_KEY
ARG MINIO_SECRET_KEY
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_TRPC_URL

# Set environment variables from build arguments
ENV DATABASE_URL=$DATABASE_URL
ENV MINIO_ENDPOINT=$MINIO_ENDPOINT
ENV MINIO_ACCESS_KEY=$MINIO_ACCESS_KEY
ENV MINIO_SECRET_KEY=$MINIO_SECRET_KEY
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV NEXT_PUBLIC_TRPC_URL=$NEXT_PUBLIC_TRPC_URL

# Build the Next.js app for production (Next.js will transpile @workspace/ui)
RUN cd apps/web && npm run build

# Debug: List the standalone build contents
RUN echo "=== Standalone build contents ===" && \
    find apps/web/.next/standalone -type f -name "server.js" 2>/dev/null || true && \
    ls -la apps/web/.next/standalone/ 2>/dev/null || echo "No standalone directory found" && \
    ls -la apps/web/.next/standalone/apps/web/ 2>/dev/null || echo "No apps/web directory in standalone"

# Production dependencies (minimal)
FROM base AS prod-deps
RUN apk add --no-cache libc6-compat
COPY package.json package-lock.json ./
COPY apps/web/package.json ./apps/web/
COPY apps/api/package.json ./apps/api/
COPY packages/config/package.json ./packages/config/
COPY packages/ui/package.json ./packages/ui/
RUN npm ci --only=production

# Production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application - the standalone build maintains monorepo structure
COPY --from=builder /app/apps/web/.next/standalone ./
COPY --from=builder /app/apps/web/.next/static ./apps/web/.next/static
COPY --from=builder /app/apps/web/public ./apps/web/public

RUN chown -R nextjs:nodejs .

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# The server.js is located at apps/web/server.js in the standalone output due to outputFileTracingRoot
CMD ["node", "apps/web/server.js"]