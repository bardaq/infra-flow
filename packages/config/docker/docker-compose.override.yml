# Docker Compose override for development
# This file is automatically loaded by docker-compose and provides development overrides
# Ensure you have packages/config/.env file with your environment variables
# ALL variables must be defined in .env file - no fallbacks provided

services:
  postgres:
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"

  minio:
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"

  api:
    build:
      context: ../../../
      dockerfile: packages/config/docker/Dockerfile.api
      target: development
    environment:
      NODE_ENV: development
      DATABASE_URL: ${DATABASE_URL}
      HOST: 0.0.0.0
      PORT: ${PORT}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    volumes:
      # Mount API source for HMR
      - ../../../apps/api/src:/app/apps/api/src
      # Mount logs
      - ../logs:/app/logs
      # Mount workspace packages for shared dependencies
      - ../../../packages:/app/packages
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/trpc/test.version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  web:
    build:
      context: ../../../
      dockerfile: packages/config/docker/Dockerfile.web
      target: development
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_TRPC_URL: ${NEXT_PUBLIC_TRPC_URL}
      INTERNAL_API_URL: http://api:${PORT}
    volumes:
      # Mount web app source for HMR
      - ../../../apps/web:/app/apps/web
      # Mount API source for shared types and dependencies
      - ../../../apps/api/src:/app/apps/api/src
      # Mount workspace packages for HMR (including UI package)
      - ../../../packages:/app/packages
      # Exclude node_modules from volume mounting to avoid conflicts
      - /app/apps/web/node_modules
      - /app/packages/ui/node_modules
    depends_on:
      api:
        condition: service_healthy

  # Prisma Studio service for database management
  prisma-studio:
    image: node:lts-alpine
    container_name: infra-flow-prisma-studio
    working_dir: /usr/src/app
    volumes:
      - ../../../:/usr/src/app
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NODE_ENV: development
    ports:
      - "5555:5555"
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
    networks:
      - infra-flow-network
    command:
      [
        "sh",
        "-c",
        "cd apps/api && npx prisma studio --schema=src/db/schema.prisma --port 5555 --hostname 0.0.0.0 --browser none",
      ]
    restart: unless-stopped

